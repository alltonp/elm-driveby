//TODO: make this the main script https://github.com/ariya/phantomjs/blob/master/examples/arguments.js
//TODO: this looks good for parallel - https://github.com/ariya/phantomjs/blob/master/examples/child_process-examples.js
//TODO: implement a tuplespace in elm?
//TODO: in larger test suites we will defo want to unserver at the end of each script
//TODO: consider running this as a daemon/server and connect to it .. a-la flyby .. and shorter start time
//TODO: make it so that each command can report it's duration

TODO:
- rename autobuild -> autocompile
- make an autotest.js which compiles app, compiles tests, and runs tests if both compiles succeeds ...
- integrate with elm-test
- we want these things to be tests .. ideally ..
- how about wrapping phantomjs in a restful server and have elm call it ...
  ... would that then mean that it could be a package?
- aim for a single js artifact, and the phantomjs download (jquery is a problem probably)
- move the more scripty stuff into driveby.js ... including autotest features and spawning etc.
- support command stubbing with a response string, json, text etc.
- see if there is a way to save a Virtual Dom to file ...
- more of a testing solution than a webdriver wrapper

--TODO: ultimately no console sutff in here, report it to js land instead
--TODO: should be assert [ "textContains", "#messageList", "Auto Loading Metadata" ]
--TODO: or assert [ "#messageList" "textContains", "Auto Loading Metadata" ]
--TODO: might map well to jquery functions
--TODO: should screenshot be a command? (taking a filepath, would offload more to elm)
--TODO: support TextEquals next
--TODO: need to fail properly when a script fails ...
--TODO: idealy we'd have the public commands and the model in the top level thing, so only 1 import ...

--unsafeFromString : String -> Date
--unsafeFromString dateStr =
--  case Date.fromString dateStr of
--    Ok date -> date
--    Err msg -> Debug.crash("unsafeFromString")
--


USEFUL:

evan hacking focus:
- https://github.com/evancz/elm-todomvc/blob/bc37c9b97db9e1c1d5db9debf0d900c77461e584/index.html#L19

useful for a ui-less worker:
- https://groups.google.com/forum/#!topic/elm-discuss/xPIFPRzXNSQ
- http://package.elm-lang.org/packages/lukewestby/worker/2.0.0/

useful for parallel launching:
- https://github.com/ariya/phantomjs/blob/master/examples/child_process-examples.js
- https://github.com/ariya/phantomjs/blob/master/examples/render_multi_url.js

useful for reporting:
- https://github.com/ariya/phantomjs/blob/master/examples/echoToFile.js

useful for server/stubbing:
- https://github.com/ariya/phantomjs/blob/master/examples/server.js

links:
- https://github.com/deadfoxygrandpa/elm-test
- https://github.com/laszlopandy/elm-console

writing native code:
- https://github.com/NoRedInk/take-home/wiki/Writing-your-first-impure-Elm-Native-module

testing ports and effects:
- https://github.com/rogeriochaves/elm-testable
- https://gist.github.com/evancz/8521339

jquery asserts:
- http://www.w3schools.com/jquery/tryit.asp?filename=tryjquery_dom_html_set

interesting way to bend in the js's
- https://github.com/laszlopandy/elm-console/blob/master/elm-io.sh

parallel:
- http://package.elm-lang.org/packages/elm-lang/core/4.0.1/Process#future-plans

example from:
- https://github.com/evancz/elm-architecture-tutorial/blob/master/examples/1-button.elm

element flashing: (good for screenshots maybe ...)
- http://www.rubydoc.info/gems/watir-webdriver/Watir/Element#flash-instance_method

TIPS:
- port modules not permitted in the port repository


---- from readme.md

### Writing a Script ###


1. Create a Script - ExampleTest.elm

 ```
 module ExampleTest exposing (..)


 import Driveby exposing (..)


 all : Suite
 all =
   suite "All" [test1]


 test1 : Script
 test1 =
   script "elm-architecture-tutorial 1-button"
     [ serve "examples/elm-architecture-tutorial/1-button"
     , gotoLocal "/1-button.html"
     , assert <| textEquals "count" "0"
     , click "increment"
     , assert <| textEquals "count" "1"
     , click "decrement"
     , assert <| textEquals "count" "0"
     ]
 ```


2. Create a main to run the script - Example.elm

 ```
 port module Example exposing (requests)


 import Driveby.Runner exposing (..)
 import ExampleTest


 port requests : Request -> Cmd msg
 port responses : (Response -> msg) -> Sub msg


 main =
   run ExampleTest.all requests responses
```

3. Compile

```
elm-make Example.elm --output tests.js
```


### Run ###
1. compile the application - ```elm-make elm-stuff/packages/alltonp/elm-driveby/x.x.x/1-button.elm --output 1-button.html```
2. compile the tests - ```elm-make elm-stuff/packages/alltonp/elm-driveby/x.x.x/1-button-test.elm --output tests.js```
3. phantomjs elm-stuff/packages/alltonp/elm-driveby/x.x.x/driveby.js tests.js

1. compile the application - ```elm-make examples/elm-architecture-tutorial/1-button/1-button.elm --output 1-button.html```
2. compile the tests - ```elm-make examples/elm-architecture-tutorial/1-button/1-button-test.elm --output tests.js```
3. ./phantomjs driveby.js tests.js

TODO:
- make tests.js a config option ...
- check we don't need Driveby import in Example.elm
- make example be non hosted
- explain features first

